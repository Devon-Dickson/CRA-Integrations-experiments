{"version":3,"sources":["logo.svg","components/Heading/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","HeadingContext","React","createContext","Section","props","headingContext","useContext","headingLevel","clampHeadingLevel","Provider","value","children","Heading","Component","Error","App","className","fallback","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","Sentry","dsn","integrations","Integrations","BrowserTracing","tracesSampleRate","environment","process","release","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,2MCO9BC,G,MAAiBC,IAAMC,cAAc,IAOrCC,EAAU,SAACC,GACpB,IAAMC,EAAiBC,qBAAWN,GAC5BO,EAAeC,EAAkBH,EAAiB,GACxD,OACI,kBAACL,EAAeS,SAAhB,CAAyBC,MAAOH,GAC3BH,EAAMO,WAKNC,EAAU,SACnBR,GAKA,IAAMC,EAAiBC,qBAAWN,GAC5BO,EAAeC,EAAkBH,GACjCQ,EAAS,WAAON,GACtB,OAAO,kBAACM,EAAcT,EAAQA,EAAMO,WAS3BH,EAAoB,SAACD,GAC9B,GAAIA,EAAe,EACf,MAAMO,MAAM,oBACT,OAAIP,EAAe,EACf,EAEAA,GCPAQ,MAnCf,WACI,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,kBAAC,IAAD,CACIC,SAAU,sDAEV,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,uBAQ5B,yBAAKC,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SACzC,uBACIJ,UAAU,WACVK,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJR,kBChBIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAAY,CACRC,IACI,4EACJC,aAAc,CAAC,IAAIC,IAAaC,gBAChCC,iBAAkB,EAClBC,YAAaC,aACbC,QAEUD,6CAIdE,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a47f43ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {\n    DetailedHTMLProps,\n    HTMLAttributes,\n    ReactNode,\n    useContext,\n} from \"react\";\n\nexport const HeadingContext = React.createContext(1);\n\ntype SectionProps = {\n    value?: number;\n    children: ReactNode;\n};\n\nexport const Section = (props: SectionProps) => {\n    const headingContext = useContext(HeadingContext);\n    const headingLevel = clampHeadingLevel(headingContext + 1);\n    return (\n        <HeadingContext.Provider value={headingLevel}>\n            {props.children}\n        </HeadingContext.Provider>\n    );\n};\n\nexport const Heading = (\n    props: DetailedHTMLProps<\n        HTMLAttributes<HTMLHeadingElement>,\n        HTMLHeadingElement\n    >\n) => {\n    const headingContext = useContext(HeadingContext);\n    const headingLevel = clampHeadingLevel(headingContext);\n    const Component = `h${headingLevel}`;\n    return <Component {...props}>{props.children}</Component>;\n};\n\n/**\n * Clamps the headingLevel between 1 and 6 per the {@link https://html.spec.whatwg.org/multipage/sections.html#the-h1,-h2,-h3,-h4,-h5,-and-h6-elements HTML5 spec}:\n *\n * @param headingLevel - The heading level\n * @returns The heading level clamped between 1 and 6\n */\nexport const clampHeadingLevel = (headingLevel: number): number => {\n    if (headingLevel > 6) {\n        throw Error(\"Heading too big!\");\n    } else if (headingLevel < 1) {\n        return 1;\n    } else {\n        return headingLevel;\n    }\n};\n","import React from \"react\";\nimport * as Sentry from \"@sentry/react\";\nimport logo from \"./logo.svg\";\nimport \"App.css\";\nimport { Heading, Section } from \"components/Heading\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Sentry.ErrorBoundary\n                    fallback={<div>An error has occured</div>}\n                >\n                    <Section>\n                        <Section>\n                            <Section>\n                                <Section>\n                                    <Section>\n                                        <Section>\n                                            <Heading>Heading</Heading>\n                                        </Section>\n                                    </Section>\n                                </Section>\n                            </Section>\n                        </Section>\n                    </Section>\n                </Sentry.ErrorBoundary>\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nSentry.init({\n    dsn:\n        \"https://43e6e5b91a5340f89fc7079a39947c1a@o466374.ingest.sentry.io/5480642\",\n    integrations: [new Integrations.BrowserTracing()],\n    tracesSampleRate: 1.0,\n    environment: process.env.NODE_ENV,\n    release:\n        process.env.NODE_ENV === \"production\"\n            ? process.env.REACT_APP_GIT_SHA\n            : undefined,\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}